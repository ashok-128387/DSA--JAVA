import java.util.*;
class Node
{
    int key, height;
    Node left, right;
    Node (int value)
    {
        key = value;
        height = 1;
    } 
} 
class AVLTree{
    Node root;
    
    int height (Node node) 
    {
        if (node == null)
        return 0;
        return node.height;
    }

    int max (int a, int b) 
    {
        return (a > b) ? a : b;
    }
 
    Node rotateRight (Node b)
    {
        Node a = b.left;
        Node c = a.right;
        a.right = b;    
        b.left = c;
        b.height = max (height (b.left), height (b.right)) + 1;
        a.height = max (height (a.left), height (a.right)) + 1;
        return a;
    }
  
    Node rotateLeft (Node a) 
    {
        Node b = a.right;
        Node c = b.left;
        b.left = a;
        a.right = c;
        a.height = max (height (a.left), height (a.right)) + 1;
        b.height = max (height (b.left), height (b.right)) + 1;
        return b;
    }

    int getBalance (Node node) 
    {
        if (node == null)
        {
            return 0;
        }
        return height (node.left) - height (node.right);
    }
 
    Node insert (Node node1, int key)
    {
        if (node1 == null)
            return (new Node (key));
    
        if (key < node1.key)
            node1.left = insert (node1.left, key);
        else if (key > node1.key)
            node1.right = insert (node1.right, key);
        else
            return node1;
        node1.height = 1 + max (height (node1.left), height (node1.right));
        int balance = getBalance (node1);
    
        if (balance > 1 && key < node1.left.key)
            return rotateRight (node1);
        if (balance < -1 && key > node1.right.key)
            return rotateLeft (node1);   
        if (balance > 1 && key > node1.left.key)
        {
            node1.left = rotateLeft (node1.left);
            return rotateRight (node1);
        }
        
        if (balance < -1 && key < node1.right.key)
        {
            node1.right = rotateRight (node1.right);
            return rotateLeft (node1);
        }
        return node1;
    }
 
    void preOrder (Node node) 
    {
        if (node != null)
        {
            System.out.print (node.key + " ");
            preOrder (node.left);
            preOrder (node.right);
        }
    }
}
public class Main{
 
    public static void main (String[]args)
    {
        AVLTree tree = new AVLTree ();
        tree.root = tree.insert (tree.root, 10);
        tree.root = tree.insert (tree.root, 20);
        tree.root = tree.insert (tree.root, 30);
        tree.root = tree.insert (tree.root, 40);
        tree.root = tree.insert (tree.root, 50);
        tree.root = tree.insert (tree.root, 25);
        System.out.println ("Tree Traversal");
        tree.preOrder (tree.root);
    } 
}
